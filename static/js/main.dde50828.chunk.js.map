{"version":3,"sources":["components/Board/BoardView.module.scss","types/types.ts","actions/boardActions.ts","images/heart.png","images/cross.png","components/Cell/CellData.tsx","components/Cell/CellView.tsx","components/Board/BoardView.tsx","components/Game/GameView.tsx","utils/gameUtils.ts","reducer/gameReducer.ts","App.js","index.js","components/Game/GameView.module.scss","components/Cell/CellView.module.scss"],"names":["module","exports","Marker","Player","SET_MARKER","RESET_GAME","heartCell","className","styles","src","heartImage","alt","crossCell","crossImage","notFilledCell","CellView","props","filledWith","dispatch","useDispatch","cellIsUnmarked","cellInfo","unmarked","onClick","type","row","cell","column","heart","cross","BoardView","this","boardData","map","indexOf","Component","GameView","useSelector","state","currentPlayer","gameFinished","getMarkerFor","isGameFinished","markerForCurrentPlayer","marker","allMarkerOfRow","r","all","equals","hasThreeInRow","columns","allMarkerOfColumn","c","hasThreeInColumn","diagonal","diagonalReverse","diagonalCompletelyMarked","diagonalReverseCompletelyMarked","hasThreeDiagonal","INITIAL_STATE","updateGame","currentState","clickedCell","isUnmarked","gameReducer","action","clone","App","store","createStore","reducer","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dde50828.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"BoardView_row__2SrdR\"};","export interface CellInfo {\n    filledWith: Marker;\n    row: number;\n    column: number;\n}\n\nexport enum Marker {\n    heart,\n    cross,\n    unmarked,\n}\n\nexport enum Player {\n    heart = 'Herz',\n    cross = 'Kreuz',\n}\n\nexport type Board = CellInfo[][];\n","export const SET_MARKER = 'SET_MARKER';\nexport const RESET_GAME = 'RESET_GAME';\n","export default __webpack_public_path__ + \"static/media/heart.575a9f3f.png\";","export default __webpack_public_path__ + \"static/media/cross.7ab7f1ba.png\";","import styles from './CellView.module.scss';\nimport heartImage from '../../images/heart.png';\nimport crossImage from '../../images/cross.png';\n\nexport const heartCell = (\n    <div className={styles['image-border']}>\n        <img className={styles['image']} src={heartImage} alt=\"heartImage\" />\n    </div>\n);\n\nexport const crossCell = (\n    <div className={styles['image-border']}>\n        <img className={styles['image']} src={crossImage} alt=\"crossImage\" />\n    </div>\n);\n\nexport const notFilledCell = <div className={styles['image-border']} />;\n","import {CellInfo, Marker} from '../../types/types';\nimport {SET_MARKER} from '../../actions/boardActions';\nimport {useDispatch} from 'react-redux';\nimport {crossCell, heartCell, notFilledCell} from './CellData';\n\ninterface Props {\n    cellInfo: CellInfo;\n}\n\nconst CellView = (props: Props) => {\n    const dispatch = useDispatch();\n    const setMarker = () =>\n        dispatch({\n            type: SET_MARKER,\n            row: props.cellInfo.row,\n            cell: props.cellInfo.column,\n        });\n\n    const cellIsUnmarked = props.cellInfo.filledWith === Marker.unmarked;\n\n    const getMarker = (filledWith: Marker): JSX.Element => {\n        if (filledWith === Marker.heart) {\n            return heartCell;\n        }\n        if (filledWith === Marker.cross) {\n            return crossCell;\n        }\n        return notFilledCell;\n    };\n\n    return (\n        <div onClick={() => (cellIsUnmarked ? setMarker() : '')}>{getMarker(props.cellInfo.filledWith)}</div>\n    );\n};\n\nexport default CellView;\n","import {Component} from 'react';\nimport {Board, CellInfo} from '../../types/types';\nimport styles from './BoardView.module.scss';\nimport CellView from '../Cell/CellView';\n\ninterface Props {\n    boardData: Board;\n}\n\nclass BoardView extends Component<Props> {\n    public render(): JSX.Element {\n        return (\n            <div>\n                {this.props.boardData.map((row: CellInfo[]) => {\n                    return (\n                        <div key={this.props.boardData.indexOf(row)} className={styles['row']}>\n                            <CellView key={`${this.props.boardData.indexOf(row)}0`} cellInfo={row[0]} />\n                            <CellView key={`${this.props.boardData.indexOf(row)}1`} cellInfo={row[1]} />\n                            <CellView key={`${this.props.boardData.indexOf(row)}2`} cellInfo={row[2]} />\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\nexport default BoardView;\n","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport styles from './GameView.module.scss';\nimport {RESET_GAME} from '../../actions/boardActions';\nimport BoardView from '../Board/BoardView';\n\nconst GameView = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const boardData = useSelector((state) => state.boardData);\n    const currentPlayer = useSelector((state) => state.currentPlayer);\n    const gameFinished = useSelector((state) => state.gameFinished);\n\n    return (\n        <div className={styles['container']}>\n            <p className={styles['header-text']}>Tic Tac Toe</p>\n            <p className={styles['header-text']}>{currentPlayer} ist dran!</p>\n            <BoardView boardData={boardData} />\n            {gameFinished && <p className={styles['header-text']}>Gewonnen!</p>}\n            <button className={styles['reset-button']} onClick={() => dispatch({type: RESET_GAME})}>\n                Reset\n            </button>\n        </div>\n    );\n};\n\nexport default GameView;\n","import {Board, CellInfo, Marker, Player} from '../types/types';\nimport {all, equals} from 'ramda';\n\nexport const getMarkerFor = (currentPlayer: Player): Marker =>\n    currentPlayer === Player.cross ? Marker.cross : Marker.heart;\n\nexport const getNextPlayer = (currentPlayer: Player) => (currentPlayer === Player.heart ? Player.cross : Player.heart);\n\nexport const isUnmarked = (cell: CellInfo) => cell.filledWith === Marker.unmarked;\n\nexport const hasThreeInRow = (boardData: Board, marker: Marker): boolean => {\n    for (const row of boardData) {\n        const allMarkerOfRow = row.map((r) => r.filledWith);\n        const rowCompletelyMarked = all(equals(marker))(allMarkerOfRow);\n        if (rowCompletelyMarked) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const hasThreeInColumn = (boardData: Board, marker: Marker): boolean => {\n    const columns = boardData[0].map((cellInfo) => [\n        boardData[0][cellInfo.column],\n        boardData[1][cellInfo.column],\n        boardData[2][cellInfo.column],\n    ]);\n    for (const column of columns) {\n        const allMarkerOfColumn = column.map((c) => c.filledWith);\n        const columnCompletelyMarked = all(equals(marker))(allMarkerOfColumn);\n        if (columnCompletelyMarked) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const hasThreeDiagonal = (boardData: Board, marker: Marker): boolean => {\n    const diagonal = [boardData[0][0].filledWith, boardData[1][1].filledWith, boardData[2][2].filledWith];\n    const diagonalReverse = [boardData[2][0].filledWith, boardData[1][1].filledWith, boardData[0][2].filledWith];\n\n    const diagonalCompletelyMarked = all(equals(marker))(diagonal);\n    const diagonalReverseCompletelyMarked = all(equals(marker))(diagonalReverse);\n\n    return diagonalCompletelyMarked || diagonalReverseCompletelyMarked;\n};\n\nexport const isGameFinished = (boardData: Board, currentPlayer: Player): boolean => {\n    const markerForCurrentPlayer = getMarkerFor(currentPlayer);\n    return (\n        hasThreeInRow(boardData, markerForCurrentPlayer) ||\n        hasThreeInColumn(boardData, markerForCurrentPlayer) ||\n        hasThreeDiagonal(boardData, markerForCurrentPlayer)\n    );\n};\n","import {Action} from 'redux';\nimport {RESET_GAME, SET_MARKER} from '../actions/boardActions';\nimport {Board, Marker, Player} from '../types/types';\nimport {clone} from 'ramda';\nimport {getMarkerFor, getNextPlayer, isGameFinished, isUnmarked} from '../utils/gameUtils';\n\nexport const INITIAL_STATE: GameState = {\n    gameFinished: false,\n    currentPlayer: Player.heart,\n    boardData: [\n        [\n            {filledWith: Marker.unmarked, row: 0, column: 0},\n            {filledWith: Marker.unmarked, row: 0, column: 1},\n            {filledWith: Marker.unmarked, row: 0, column: 2},\n        ],\n        [\n            {filledWith: Marker.unmarked, row: 1, column: 0},\n            {filledWith: Marker.unmarked, row: 1, column: 1},\n            {filledWith: Marker.unmarked, row: 1, column: 2},\n        ],\n        [\n            {filledWith: Marker.unmarked, row: 2, column: 0},\n            {filledWith: Marker.unmarked, row: 2, column: 1},\n            {filledWith: Marker.unmarked, row: 2, column: 2},\n        ],\n    ],\n};\n\nexport interface GameState {\n    currentPlayer: Player;\n    boardData: Board;\n    gameFinished: boolean;\n}\n\nexport interface GameAction extends Action {\n    row?: number;\n    cell?: number;\n}\n\nconst updateGame = (currentState: GameState, clickedCell: GameAction): GameState => {\n    if (currentState.gameFinished) {\n        return currentState;\n    }\n    const cell = currentState.boardData[clickedCell.row][clickedCell.cell];\n    if (isUnmarked(cell)) {\n        currentState.boardData[clickedCell.row][clickedCell.cell].filledWith = getMarkerFor(currentState.currentPlayer);\n    }\n    currentState.gameFinished = isGameFinished(currentState.boardData, currentState.currentPlayer);\n    currentState.currentPlayer = getNextPlayer(currentState.currentPlayer);\n    return currentState;\n};\n\nconst gameReducer = (state = INITIAL_STATE, action: GameAction) => {\n    const currentState = clone(state);\n    switch (action.type) {\n        case SET_MARKER:\n            return {\n                ...updateGame(currentState, action),\n            };\n        case RESET_GAME:\n            return {\n                ...INITIAL_STATE,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default gameReducer;\n","import GameView from './components/Game/GameView';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport reducer from './reducer/gameReducer';\nimport logger from 'redux-logger';\n\nconst App = () => {\n    const store = createStore(reducer, applyMiddleware(logger));\n    return (\n        <Provider store={store}>\n            <GameView />\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameView_container__woVdK\",\"header-text\":\"GameView_header-text__aYHaL\",\"reset-button\":\"GameView_reset-button__23zSL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image-border\":\"CellView_image-border__1bqXZ\",\"image\":\"CellView_image__f2DX-\"};"],"sourceRoot":""}