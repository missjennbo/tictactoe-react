{"version":3,"sources":["components/Cell/CellView.module.scss","components/Game/GameView.module.scss","components/Board/BoardView.module.scss","components/ScoreList/ScoreListView.module.scss","components/Basics/Button/Button.module.scss","components/Basics/CenteredModal/CenteredModal.module.scss","types/types.ts","actions/boardActions.ts","images/heart.png","images/cross.png","components/Cell/CellData.tsx","components/Cell/CellView.tsx","components/Board/BoardView.tsx","components/Basics/Button/Button.tsx","components/Basics/Table/Table.tsx","components/Basics/CenteredModal/CenteredModal.tsx","components/ScoreList/ScoreListView.tsx","actions/userActions.ts","components/Game/GameView.tsx","reducer/userRedcuer.ts","utils/gameUtils.ts","reducer/gameReducer.ts","reducer/index.ts","sagas/userSaga.ts","App.js","index.js"],"names":["module","exports","Marker","Player","SET_MARKER","RESET_GAME","heartCell","className","styles","src","heartImage","alt","crossCell","crossImage","notFilledCell","CellView","props","filledWith","dispatch","useDispatch","cellIsUnmarked","cellInfo","unmarked","onClick","type","row","cell","column","heart","cross","BoardView","this","boardData","map","indexOf","Component","Button","onClickHandler","text","Table","columns","data","tableInstance","useTable","initialState","defaultSorted","id","desc","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","width","margin","padding","alignSelf","headerGroup","getHeaderGroupProps","headers","textAlign","getHeaderProps","render","getRowProps","cells","getCellProps","Modal","setAppElement","CenteredModal","isOpen","content","ScoreListView","sortByScore","sortWith","descend","prop","Header","accessor","user","onClose","isVisible","LOAD_USER","SAVE_USER","GameView","useSelector","state","game","currentPlayer","gameFinished","userData","useEffect","resetGame","INITIAL_STATE","userRedcuer","action","getMarkerFor","isGameFinished","markerForCurrentPlayer","marker","allMarkerOfRow","r","all","equals","hasThreeInRow","allMarkerOfColumn","c","hasThreeInColumn","diagonal","diagonalReverse","diagonalCompletelyMarked","diagonalReverseCompletelyMarked","hasThreeDiagonal","updateGame","currentState","clickedCell","isUnmarked","gameReducer","clone","appReducer","combineReducers","loadUser","userSaga","username","score","put","takeEvery","App","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","Object","keys","sagas","forEach","saga","run","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfaad0ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image-border\":\"CellView_image-border__1bqXZ\",\"image\":\"CellView_image__f2DX-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameView_container__woVdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"BoardView_row__2SrdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header-text\":\"ScoreListView_header-text__uks2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-style\":\"Button_button-style__2ipQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal-container\":\"CenteredModal_modal-container__1XRH3\"};","export interface CellInfo {\n    filledWith: Marker;\n    row: number;\n    column: number;\n}\n\nexport enum Marker {\n    heart,\n    cross,\n    unmarked,\n}\n\nexport enum Player {\n    heart = 'Herz',\n    cross = 'Kreuz',\n}\n\nexport interface User {\n    username: string;\n    id: string;\n    score: number;\n}\n\nexport type Board = CellInfo[][];\n","export const SET_MARKER = 'SET_MARKER';\nexport const RESET_GAME = 'RESET_GAME';\n","export default __webpack_public_path__ + \"static/media/heart.575a9f3f.png\";","export default __webpack_public_path__ + \"static/media/cross.7ab7f1ba.png\";","import styles from './CellView.module.scss';\nimport heartImage from '../../images/heart.png';\nimport crossImage from '../../images/cross.png';\n\nexport const heartCell = (\n    <div className={styles['image-border']}>\n        <img className={styles['image']} src={heartImage} alt=\"heartImage\" />\n    </div>\n);\n\nexport const crossCell = (\n    <div className={styles['image-border']}>\n        <img className={styles['image']} src={crossImage} alt=\"crossImage\" />\n    </div>\n);\n\nexport const notFilledCell = <div className={styles['image-border']} />;\n","import {CellInfo, Marker} from '../../types/types';\nimport {SET_MARKER} from '../../actions/boardActions';\nimport {useDispatch} from 'react-redux';\nimport {crossCell, heartCell, notFilledCell} from './CellData';\n\ninterface Props {\n    cellInfo: CellInfo;\n}\n\nconst CellView = (props: Props) => {\n    const dispatch = useDispatch();\n    const setMarker = () =>\n        dispatch({\n            type: SET_MARKER,\n            row: props.cellInfo.row,\n            cell: props.cellInfo.column,\n        });\n\n    const cellIsUnmarked = props.cellInfo.filledWith === Marker.unmarked;\n\n    const getMarker = (filledWith: Marker): JSX.Element => {\n        if (filledWith === Marker.heart) {\n            return heartCell;\n        }\n        if (filledWith === Marker.cross) {\n            return crossCell;\n        }\n        return notFilledCell;\n    };\n\n    return (\n        <div onClick={() => (cellIsUnmarked ? setMarker() : '')}>{getMarker(props.cellInfo.filledWith)}</div>\n    );\n};\n\nexport default CellView;\n","import {Component} from 'react';\nimport {Board, CellInfo} from '../../types/types';\nimport styles from './BoardView.module.scss';\nimport CellView from '../Cell/CellView';\n\ninterface Props {\n    boardData: Board;\n}\n\nclass BoardView extends Component<Props> {\n    public render(): JSX.Element {\n        return (\n            <div>\n                {this.props.boardData.map((row: CellInfo[]) => {\n                    return (\n                        <div key={this.props.boardData.indexOf(row)} className={styles['row']}>\n                            <CellView key={`${this.props.boardData.indexOf(row)}0`} cellInfo={row[0]} />\n                            <CellView key={`${this.props.boardData.indexOf(row)}1`} cellInfo={row[1]} />\n                            <CellView key={`${this.props.boardData.indexOf(row)}2`} cellInfo={row[2]} />\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\nexport default BoardView;\n","import React from 'react';\nimport styles from './Button.module.scss';\n\ninterface Props {\n    text: string;\n    onClickHandler: () => void;\n}\nconst Button = (props: Props): JSX.Element => {\n    return (\n        <button className={styles['button-style']} onClick={props.onClickHandler}>\n            {props.text}\n        </button>\n    );\n};\n\nexport default Button;\n","import {useTable} from 'react-table';\n\nexport const Table = ({columns, data}): JSX.Element => {\n    const tableInstance = useTable({columns, data, initialState: {\n            defaultSorted: [\n                {\n                    id: 'score',\n                    desc: true\n                }\n            ]\n        }});\n\n    const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow} = tableInstance;\n\n    return (\n        // apply the table props\n        <table style={{width: '100%', margin: 50, padding: 10, alignSelf: 'center'}} {...getTableProps()}>\n            <thead>\n                {\n                    // Loop over the header rows\n                    headerGroups.map((headerGroup) => (\n                        // Apply the header row props\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {\n                                // Loop over the headers in each row\n                                headerGroup.headers.map((column) => (\n                                    // Apply the header cell props\n                                    <th style={{textAlign: 'left'}} {...column.getHeaderProps()}>\n                                        {\n                                            // Render the header\n                                            column.render('Header')\n                                        }\n                                    </th>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </thead>\n            {/* Apply the table body props */}\n            <tbody {...getTableBodyProps()}>\n                {\n                    // Loop over the table rows\n                    rows.map((row) => {\n                        // Prepare the row for display\n                        prepareRow(row);\n                        return (\n                            // Apply the row props\n                            <tr {...row.getRowProps()}>\n                                {\n                                    // Loop over the rows cells\n                                    row.cells.map((cell) => {\n                                        // Apply the cell props\n                                        return (\n                                            <td style={{textAlign: 'left'}} {...cell.getCellProps()}>\n                                                {\n                                                    // Render the cell contents\n                                                    cell.render('Cell')\n                                                }\n                                            </td>\n                                        );\n                                    })\n                                }\n                            </tr>\n                        );\n                    })\n                }\n            </tbody>\n        </table>\n    );\n};\n","import React from 'react';\nimport styles from './CenteredModal.module.scss';\nimport Modal from 'react-modal';\n\nModal.setAppElement('body');\n\nconst CenteredModal = (props: {isOpen: boolean, content: JSX.Element}): JSX.Element => {\n    return (\n        <div>\n            <Modal isOpen={props.isOpen} className={styles['modal-container']}>\n                {props.content}\n            </Modal>\n        </div>\n    );\n};\n\nexport default CenteredModal;\n","import React from 'react';\nimport styles from './ScoreListView.module.scss';\nimport Button from '../Basics/Button/Button';\nimport { Table } from '../Basics/Table/Table';\nimport { User } from '../../types/types';\nimport { descend, prop, sortWith } from 'ramda';\nimport CenteredModal from '../Basics/CenteredModal/CenteredModal';\n\nconst ScoreListView = (props: {isVisible: boolean; user: User[]; onClose: () => void}): JSX.Element => {\n    const columns = [\n        {\n            Header: 'Username',\n            accessor: 'username',\n        },\n        {\n            Header: 'Score',\n            accessor: 'score',\n        },\n    ];\n\n    const sortByScore = sortWith([\n        descend(prop('score'))\n    ]);\n\n    const content = <><p className={styles['header-text']}>Gewonnen!</p>\n        <Table columns={columns} data={sortByScore(props.user)}/>\n        <div style={{alignSelf: 'center'}}>\n            <Button text={'Close'} onClickHandler={props.onClose}/>\n        </div>\n    </>;\n\n    return (\n        <div>\n            <CenteredModal isOpen={props.isVisible} content={content}/>\n        </div>\n    );\n};\n\nexport default ScoreListView;\n","export const LOAD_USER = 'LOAD_USER';\nexport const SAVE_USER = 'SAVE_USER';\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './GameView.module.scss';\nimport { RESET_GAME } from '../../actions/boardActions';\nimport BoardView from '../Board/BoardView';\nimport ScoreListView from '../ScoreList/ScoreListView';\nimport Button from '../Basics/Button/Button';\nimport { LOAD_USER } from '../../actions/userActions';\n\nconst GameView = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const boardData = useSelector((state) => state.game.boardData);\n    const currentPlayer = useSelector((state) => state.game.currentPlayer);\n    const gameFinished = useSelector((state) => state.game.gameFinished);\n    const user = useSelector((state) => state.user.userData);\n\n    useEffect(() => dispatch({type: LOAD_USER}), [dispatch, gameFinished]);\n\n    const resetGame = () => dispatch({type: RESET_GAME});\n\n    return (\n        <div className={styles['container']}>\n            <p className={styles['header-text']}>Tic Tac Toe</p>\n            <p className={styles['header-text']}>{currentPlayer} ist dran!</p>\n            <BoardView boardData={boardData} />\n            <ScoreListView isVisible={gameFinished} user={user} onClose={resetGame} />\n            <Button text={'Reset'} onClickHandler={resetGame} />\n        </div>\n    );\n};\n\nexport default GameView;\n","import {User} from '../types/types';\nimport {Action} from 'redux';\nimport {SAVE_USER} from '../actions/userActions';\n\nconst INITIAL_STATE: UserState = {\n    userData: [],\n};\n\ninterface UserState {\n    userData: User[];\n}\n\ninterface UserAction extends Action {\n    userData: User[];\n}\n\nconst userRedcuer =  (state = INITIAL_STATE, action: UserAction) => {\n    switch (action.type) {\n        case SAVE_USER:\n            return {\n                userData: action.userData,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default userRedcuer;","import {Board, CellInfo, Marker, Player} from '../types/types';\nimport {all, equals} from 'ramda';\n\nexport const getMarkerFor = (currentPlayer: Player): Marker =>\n    currentPlayer === Player.cross ? Marker.cross : Marker.heart;\n\nexport const getNextPlayer = (currentPlayer: Player) => (currentPlayer === Player.heart ? Player.cross : Player.heart);\n\nexport const isUnmarked = (cell: CellInfo) => cell.filledWith === Marker.unmarked;\n\nexport const hasThreeInRow = (boardData: Board, marker: Marker): boolean => {\n    for (const row of boardData) {\n        const allMarkerOfRow = row.map((r) => r.filledWith);\n        const rowCompletelyMarked = all(equals(marker))(allMarkerOfRow);\n        if (rowCompletelyMarked) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const hasThreeInColumn = (boardData: Board, marker: Marker): boolean => {\n    const columns = boardData[0].map((cellInfo) => [\n        boardData[0][cellInfo.column],\n        boardData[1][cellInfo.column],\n        boardData[2][cellInfo.column],\n    ]);\n    for (const column of columns) {\n        const allMarkerOfColumn = column.map((c) => c.filledWith);\n        const columnCompletelyMarked = all(equals(marker))(allMarkerOfColumn);\n        if (columnCompletelyMarked) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const hasThreeDiagonal = (boardData: Board, marker: Marker): boolean => {\n    const diagonal = [boardData[0][0].filledWith, boardData[1][1].filledWith, boardData[2][2].filledWith];\n    const diagonalReverse = [boardData[2][0].filledWith, boardData[1][1].filledWith, boardData[0][2].filledWith];\n\n    const diagonalCompletelyMarked = all(equals(marker))(diagonal);\n    const diagonalReverseCompletelyMarked = all(equals(marker))(diagonalReverse);\n\n    return diagonalCompletelyMarked || diagonalReverseCompletelyMarked;\n};\n\nexport const isGameFinished = (boardData: Board, currentPlayer: Player): boolean => {\n    const markerForCurrentPlayer = getMarkerFor(currentPlayer);\n    return (\n        hasThreeInRow(boardData, markerForCurrentPlayer) ||\n        hasThreeInColumn(boardData, markerForCurrentPlayer) ||\n        hasThreeDiagonal(boardData, markerForCurrentPlayer)\n    );\n};\n","import { Action } from 'redux';\nimport { RESET_GAME, SET_MARKER } from '../actions/boardActions';\nimport { Board, Marker, Player } from '../types/types';\nimport { clone } from 'ramda';\nimport { getMarkerFor, getNextPlayer, isGameFinished, isUnmarked } from '../utils/gameUtils';\n\nexport const INITIAL_STATE: GameState = {\n    gameFinished: false,\n    currentPlayer: Player.heart,\n    boardData: [\n        [\n            {filledWith: Marker.unmarked, row: 0, column: 0},\n            {filledWith: Marker.unmarked, row: 0, column: 1},\n            {filledWith: Marker.unmarked, row: 0, column: 2},\n        ],\n        [\n            {filledWith: Marker.unmarked, row: 1, column: 0},\n            {filledWith: Marker.unmarked, row: 1, column: 1},\n            {filledWith: Marker.unmarked, row: 1, column: 2},\n        ],\n        [\n            {filledWith: Marker.unmarked, row: 2, column: 0},\n            {filledWith: Marker.unmarked, row: 2, column: 1},\n            {filledWith: Marker.unmarked, row: 2, column: 2},\n        ],\n    ],\n};\n\nexport interface GameState {\n    currentPlayer: Player;\n    boardData: Board;\n    gameFinished: boolean;\n}\n\nexport interface GameAction extends Action {\n    row?: number;\n    cell?: number;\n}\n\nconst updateGame = (currentState: GameState, clickedCell: GameAction): GameState => {\n    if (currentState.gameFinished) {\n        return currentState;\n    }\n    const cell = currentState.boardData[clickedCell.row][clickedCell.cell];\n    if (isUnmarked(cell)) {\n        currentState.boardData[clickedCell.row][clickedCell.cell].filledWith = getMarkerFor(currentState.currentPlayer);\n    }\n    currentState.gameFinished = isGameFinished(currentState.boardData, currentState.currentPlayer);\n    currentState.currentPlayer = getNextPlayer(currentState.currentPlayer);\n    return currentState;\n};\n\nconst gameReducer = (state = INITIAL_STATE, action: GameAction) => {\n    const currentState = clone(state);\n    switch (action.type) {\n        case SET_MARKER:\n            return {\n                ...updateGame(currentState, action),\n            };\n        case RESET_GAME:\n            return {\n                ...INITIAL_STATE,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default gameReducer;","import {combineReducers} from 'redux';\nimport user from './userRedcuer';\nimport game from './gameReducer';\n\nexport const appReducer = combineReducers({\n    user,\n    game,\n});\n","import {ForkEffect, PutEffect, takeEvery, put} from 'redux-saga/effects';\nimport {User} from '../types/types';\nimport {LOAD_USER, SAVE_USER} from '../actions/userActions';\n\nfunction* loadUser(action): Iterator<PutEffect> {\n    const userData: User[] = [\n        {id: '12345', username: 'jegom', score: 1},\n        {id: '54321', username: 'maluc', score: 5},\n    ];\n    yield put({type: SAVE_USER, userData});\n}\n\nfunction* userSaga(): Iterator<ForkEffect> {\n    yield takeEvery(LOAD_USER, loadUser);\n}\n\nexport {userSaga};\n","import GameView from './components/Game/GameView';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport logger from 'redux-logger';\nimport {appReducer} from './reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport * as sagas from './sagas';\n\nconst App = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(appReducer, applyMiddleware(sagaMiddleware, logger));\n    Object.keys(sagas).forEach((saga) => {\n        sagaMiddleware.run(sagas[saga]);\n    });\n    return (\n        <Provider store={store}>\n            <GameView />\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}