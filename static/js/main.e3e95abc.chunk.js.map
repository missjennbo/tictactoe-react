{"version":3,"sources":["components/Cell/CellView.module.scss","components/Game/GameView.module.scss","components/Board/BoardView.module.scss","components/Basics/Button/Button.module.scss","components/Basics/CenteredModal/CenteredModal.module.scss","components/UserScore/UsernameInput/UsernameInput.module.scss","components/UserScore/ScoreList/ScoreListView.module.scss","types/types.ts","actions/boardActions.ts","images/heart.png","images/cross.png","components/Cell/CellData.tsx","components/Cell/CellView.tsx","components/Board/BoardView.tsx","components/Basics/Button/Button.tsx","components/Basics/CenteredModal/CenteredModal.tsx","actions/userActions.ts","actions/actionCreators.ts","components/UserScore/UsernameInput/UsernameInput.tsx","components/Basics/Table/Table.tsx","components/UserScore/ScoreList/ScoreListView.tsx","components/UserScore/UserScore.tsx","components/Game/GameView.tsx","reducer/userRedcuer.ts","utils/gameUtils.ts","reducer/gameReducer.ts","reducer/index.ts","sagas/userSaga.ts","App.js","index.js"],"names":["module","exports","Marker","Player","SET_MARKER","RESET_GAME","heartCell","className","styles","src","heartImage","alt","crossCell","crossImage","notFilledCell","CellView","props","filledWith","dispatch","useDispatch","cellIsUnmarked","cellInfo","unmarked","onClick","type","row","cell","column","heart","cross","BoardView","this","boardData","map","indexOf","Component","Button","onClickHandler","text","Modal","setAppElement","CenteredModal","isOpen","content","LOAD_USER","SAVE_USER","SET_CURRENT_USERNAME","INCREASE_SCORE","setCurrentUsername","username","UsernameInput","useForm","handleSubmit","register","onSubmit","values","increaseUserScore","name","ref","defaultValue","value","Table","columns","data","tableInstance","useTable","initialState","defaultSorted","id","desc","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","width","margin","padding","alignSelf","headerGroup","getHeaderGroupProps","headers","textAlign","getHeaderProps","render","getRowProps","cells","getCellProps","ScoreListView","sortByScore","sortWith","descend","prop","Header","accessor","user","onClose","UserScore","useSelector","state","userList","currentUsername","GameView","game","currentPlayer","gameFinished","useEffect","INITIAL_STATE","userRedcuer","action","getMarkerFor","isGameFinished","markerForCurrentPlayer","marker","allMarkerOfRow","r","all","equals","hasThreeInRow","allMarkerOfColumn","c","hasThreeInColumn","diagonal","diagonalReverse","diagonalCompletelyMarked","diagonalReverseCompletelyMarked","hasThreeDiagonal","updateGame","currentState","clickedCell","isUnmarked","gameReducer","clone","appReducer","combineReducers","loadUser","increaseScore","userSaga","userData","score","put","call","takeEvery","App","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","Object","keys","sagas","forEach","saga","run","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3e95abc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image-border\":\"CellView_image-border__1bqXZ\",\"image\":\"CellView_image__f2DX-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameView_container__woVdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"BoardView_row__2SrdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-style\":\"Button_button-style__2ipQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal-container\":\"CenteredModal_modal-container__1XRH3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-container\":\"UsernameInput_form-container__zZFUa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header-text\":\"ScoreListView_header-text__2nnlx\"};","export interface CellInfo {\n    filledWith: Marker;\n    row: number;\n    column: number;\n}\n\nexport enum Marker {\n    heart,\n    cross,\n    unmarked,\n}\n\nexport enum Player {\n    heart = 'Herz',\n    cross = 'Kreuz',\n}\n\nexport interface User {\n    username: string;\n    id: string;\n    score: number;\n}\n\nexport type Board = CellInfo[][];\n","export const SET_MARKER = 'SET_MARKER';\nexport const RESET_GAME = 'RESET_GAME';\n","export default __webpack_public_path__ + \"static/media/heart.575a9f3f.png\";","export default __webpack_public_path__ + \"static/media/cross.7ab7f1ba.png\";","import styles from './CellView.module.scss';\nimport heartImage from '../../images/heart.png';\nimport crossImage from '../../images/cross.png';\n\nexport const heartCell = (\n    <div className={styles['image-border']}>\n        <img className={styles['image']} src={heartImage} alt=\"heartImage\" />\n    </div>\n);\n\nexport const crossCell = (\n    <div className={styles['image-border']}>\n        <img className={styles['image']} src={crossImage} alt=\"crossImage\" />\n    </div>\n);\n\nexport const notFilledCell = <div className={styles['image-border']} />;\n","import {CellInfo, Marker} from '../../types/types';\nimport {SET_MARKER} from '../../actions/boardActions';\nimport {useDispatch} from 'react-redux';\nimport {crossCell, heartCell, notFilledCell} from './CellData';\n\ninterface Props {\n    cellInfo: CellInfo;\n}\n\nconst CellView = (props: Props) => {\n    const dispatch = useDispatch();\n    const setMarker = () =>\n        dispatch({\n            type: SET_MARKER,\n            row: props.cellInfo.row,\n            cell: props.cellInfo.column,\n        });\n\n    const cellIsUnmarked = props.cellInfo.filledWith === Marker.unmarked;\n\n    const getMarker = (filledWith: Marker): JSX.Element => {\n        if (filledWith === Marker.heart) {\n            return heartCell;\n        }\n        if (filledWith === Marker.cross) {\n            return crossCell;\n        }\n        return notFilledCell;\n    };\n\n    return (\n        <div onClick={() => (cellIsUnmarked ? setMarker() : '')}>{getMarker(props.cellInfo.filledWith)}</div>\n    );\n};\n\nexport default CellView;\n","import {Component} from 'react';\nimport {Board, CellInfo} from '../../types/types';\nimport styles from './BoardView.module.scss';\nimport CellView from '../Cell/CellView';\n\ninterface Props {\n    boardData: Board;\n}\n\nclass BoardView extends Component<Props> {\n    public render(): JSX.Element {\n        return (\n            <div>\n                {this.props.boardData.map((row: CellInfo[]) => {\n                    return (\n                        <div key={this.props.boardData.indexOf(row)} className={styles['row']}>\n                            <CellView key={`${this.props.boardData.indexOf(row)}0`} cellInfo={row[0]} />\n                            <CellView key={`${this.props.boardData.indexOf(row)}1`} cellInfo={row[1]} />\n                            <CellView key={`${this.props.boardData.indexOf(row)}2`} cellInfo={row[2]} />\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\nexport default BoardView;\n","import React from 'react';\nimport styles from './Button.module.scss';\n\ninterface Props {\n    text: string;\n    onClickHandler: () => void;\n}\nconst Button = (props: Props): JSX.Element => {\n    return (\n        <button className={styles['button-style']} onClick={props.onClickHandler}>\n            {props.text}\n        </button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport styles from './CenteredModal.module.scss';\nimport Modal from 'react-modal';\n\nModal.setAppElement('body');\n\nconst CenteredModal = (props: {content: JSX.Element}): JSX.Element => {\n    return (\n        <div>\n            <Modal isOpen={true} className={styles['modal-container']}>\n                {props.content}\n            </Modal>\n        </div>\n    );\n};\n\nexport default CenteredModal;\n","export const LOAD_USER = 'LOAD_USER';\nexport const SAVE_USER = 'SAVE_USER';\nexport const SET_CURRENT_USERNAME = 'SET_USERNAME';\nexport const INCREASE_SCORE = 'INCREASE_USER';\n","import {Action} from 'redux';\nimport {User} from '../types/types';\nimport {INCREASE_SCORE, LOAD_USER, SAVE_USER, SET_CURRENT_USERNAME} from './userActions';\n\nexport interface UserAction extends Action {\n    userList?: User[];\n    username?: string;\n}\n\nexport const loadUser = (): Action => ({\n    type: LOAD_USER,\n});\n\nexport const saveUser = (userList): UserAction => ({type: SAVE_USER, userList});\n\nexport const setCurrentUsername = (username: string): UserAction => ({type: SET_CURRENT_USERNAME, username});\n\nexport const increaseUserScore = (username: string): UserAction => ({type: INCREASE_SCORE, username});\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useForm} from 'react-hook-form';\nimport CenteredModal from '../../Basics/CenteredModal/CenteredModal';\nimport styles from './UsernameInput.module.scss';\nimport {increaseUserScore} from '../../../actions/actionCreators';\n\nexport const UsernameInput = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const {handleSubmit, register} = useForm();\n\n    const onSubmit = (values) => {\n        const username = values.username;\n        return dispatch(increaseUserScore(username));\n    };\n\n    const content = (\n        <form className={styles['form-container']} onSubmit={handleSubmit(onSubmit)}>\n            Please type in your username:\n            <input name=\"username\" ref={register} defaultValue=\"\" />\n            <input type=\"submit\" value=\"OK\" />\n        </form>\n    );\n\n    return <CenteredModal content={content} />;\n};\n","import {useTable} from 'react-table';\n\nexport const Table = ({columns, data}): JSX.Element => {\n    const tableInstance = useTable({columns, data, initialState: {\n            defaultSorted: [\n                {\n                    id: 'score',\n                    desc: true\n                }\n            ]\n        }});\n\n    const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow} = tableInstance;\n\n    return (\n        // apply the table props\n        <table style={{width: '100%', margin: 50, padding: 10, alignSelf: 'center'}} {...getTableProps()}>\n            <thead>\n                {\n                    // Loop over the header rows\n                    headerGroups.map((headerGroup) => (\n                        // Apply the header row props\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {\n                                // Loop over the headers in each row\n                                headerGroup.headers.map((column) => (\n                                    // Apply the header cell props\n                                    <th style={{textAlign: 'left'}} {...column.getHeaderProps()}>\n                                        {\n                                            // Render the header\n                                            column.render('Header')\n                                        }\n                                    </th>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </thead>\n            {/* Apply the table body props */}\n            <tbody {...getTableBodyProps()}>\n                {\n                    // Loop over the table rows\n                    rows.map((row) => {\n                        // Prepare the row for display\n                        prepareRow(row);\n                        return (\n                            // Apply the row props\n                            <tr {...row.getRowProps()}>\n                                {\n                                    // Loop over the rows cells\n                                    row.cells.map((cell) => {\n                                        // Apply the cell props\n                                        return (\n                                            <td style={{textAlign: 'left'}} {...cell.getCellProps()}>\n                                                {\n                                                    // Render the cell contents\n                                                    cell.render('Cell')\n                                                }\n                                            </td>\n                                        );\n                                    })\n                                }\n                            </tr>\n                        );\n                    })\n                }\n            </tbody>\n        </table>\n    );\n};\n","import React from 'react';\nimport styles from './ScoreListView.module.scss';\nimport Button from '../../Basics/Button/Button';\nimport {Table} from '../../Basics/Table/Table';\nimport {User} from '../../../types/types';\nimport {descend, prop, sortWith} from 'ramda';\nimport CenteredModal from '../../Basics/CenteredModal/CenteredModal';\n\nconst ScoreListView = (props: {user: User[]; onClose: () => void}): JSX.Element => {\n    const columns = [\n        {\n            Header: 'Username',\n            accessor: 'username',\n        },\n        {\n            Header: 'Score',\n            accessor: 'score',\n        },\n    ];\n\n    const sortByScore = sortWith([descend(prop('score'))]);\n\n    const content = (\n        <>\n            <p className={styles['header-text']}>Gewonnen!</p>\n            <Table columns={columns} data={sortByScore(props.user)} />\n            <div style={{alignSelf: 'center'}}>\n                <Button text={'Close'} onClickHandler={props.onClose} />\n            </div>\n        </>\n    );\n\n    return (\n        <div>\n            <CenteredModal content={content} />\n        </div>\n    );\n};\n\nexport default ScoreListView;\n","import {UsernameInput} from './UsernameInput/UsernameInput';\nimport ScoreListView from './ScoreList/ScoreListView';\nimport React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RESET_GAME} from '../../actions/boardActions';\n\nexport const UserScore = (): JSX.Element => {\n    const user = useSelector((state) => state.user.userList);\n    const dispatch = useDispatch();\n    const currentUsername = useSelector((state) => state.user.username);\n    const resetGame = () => dispatch({type: RESET_GAME});\n\n    return <div>{currentUsername ? <ScoreListView user={user} onClose={resetGame} /> : <UsernameInput />}</div>;\n};\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport styles from './GameView.module.scss';\nimport {RESET_GAME} from '../../actions/boardActions';\nimport BoardView from '../Board/BoardView';\nimport Button from '../Basics/Button/Button';\nimport {UserScore} from '../UserScore/UserScore';\nimport {loadUser} from '../../actions/actionCreators';\n\nconst GameView = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const boardData = useSelector((state) => state.game.boardData);\n    const currentPlayer = useSelector((state) => state.game.currentPlayer);\n    const gameFinished = useSelector((state) => state.game.gameFinished);\n\n    useEffect(() => dispatch(loadUser()), [dispatch, gameFinished]);\n\n    const resetGame = () => dispatch({type: RESET_GAME});\n\n    return (\n        <div className={styles['container']}>\n            <p className={styles['header-text']}>Tic Tac Toe</p>\n            <p className={styles['header-text']}>{currentPlayer} ist dran!</p>\n            <BoardView boardData={boardData} />\n\n            {gameFinished && <UserScore />}\n\n            <Button text={'Reset'} onClickHandler={resetGame} />\n        </div>\n    );\n};\n\nexport default GameView;\n","import {User} from '../types/types';\nimport {SAVE_USER, SET_CURRENT_USERNAME} from '../actions/userActions';\nimport {UserAction} from '../actions/actionCreators';\n\nconst INITIAL_STATE: UserState = {\n    userList: [],\n    username: null,\n};\n\ninterface UserState {\n    userList: User[];\n    username: string;\n}\n\nconst userRedcuer = (state = INITIAL_STATE, action: UserAction) => {\n    switch (action.type) {\n        case SAVE_USER:\n            return {\n                ...state,\n                userList: action.userList,\n            };\n        case SET_CURRENT_USERNAME:\n            return {\n                ...state,\n                username: action.username,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default userRedcuer;\n","import {Board, CellInfo, Marker, Player} from '../types/types';\nimport {all, equals} from 'ramda';\n\nexport const getMarkerFor = (currentPlayer: Player): Marker =>\n    currentPlayer === Player.cross ? Marker.cross : Marker.heart;\n\nexport const getNextPlayer = (currentPlayer: Player) => (currentPlayer === Player.heart ? Player.cross : Player.heart);\n\nexport const isUnmarked = (cell: CellInfo) => cell.filledWith === Marker.unmarked;\n\nexport const hasThreeInRow = (boardData: Board, marker: Marker): boolean => {\n    for (const row of boardData) {\n        const allMarkerOfRow = row.map((r) => r.filledWith);\n        const rowCompletelyMarked = all(equals(marker))(allMarkerOfRow);\n        if (rowCompletelyMarked) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const hasThreeInColumn = (boardData: Board, marker: Marker): boolean => {\n    const columns = boardData[0].map((cellInfo) => [\n        boardData[0][cellInfo.column],\n        boardData[1][cellInfo.column],\n        boardData[2][cellInfo.column],\n    ]);\n    for (const column of columns) {\n        const allMarkerOfColumn = column.map((c) => c.filledWith);\n        const columnCompletelyMarked = all(equals(marker))(allMarkerOfColumn);\n        if (columnCompletelyMarked) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const hasThreeDiagonal = (boardData: Board, marker: Marker): boolean => {\n    const diagonal = [boardData[0][0].filledWith, boardData[1][1].filledWith, boardData[2][2].filledWith];\n    const diagonalReverse = [boardData[2][0].filledWith, boardData[1][1].filledWith, boardData[0][2].filledWith];\n\n    const diagonalCompletelyMarked = all(equals(marker))(diagonal);\n    const diagonalReverseCompletelyMarked = all(equals(marker))(diagonalReverse);\n\n    return diagonalCompletelyMarked || diagonalReverseCompletelyMarked;\n};\n\nexport const isGameFinished = (boardData: Board, currentPlayer: Player): boolean => {\n    const markerForCurrentPlayer = getMarkerFor(currentPlayer);\n    return (\n        hasThreeInRow(boardData, markerForCurrentPlayer) ||\n        hasThreeInColumn(boardData, markerForCurrentPlayer) ||\n        hasThreeDiagonal(boardData, markerForCurrentPlayer)\n    );\n};\n","import { Action } from 'redux';\nimport { RESET_GAME, SET_MARKER } from '../actions/boardActions';\nimport { Board, Marker, Player } from '../types/types';\nimport { clone } from 'ramda';\nimport { getMarkerFor, getNextPlayer, isGameFinished, isUnmarked } from '../utils/gameUtils';\n\nexport const INITIAL_STATE: GameState = {\n    gameFinished: false,\n    currentPlayer: Player.heart,\n    boardData: [\n        [\n            {filledWith: Marker.unmarked, row: 0, column: 0},\n            {filledWith: Marker.unmarked, row: 0, column: 1},\n            {filledWith: Marker.unmarked, row: 0, column: 2},\n        ],\n        [\n            {filledWith: Marker.unmarked, row: 1, column: 0},\n            {filledWith: Marker.unmarked, row: 1, column: 1},\n            {filledWith: Marker.unmarked, row: 1, column: 2},\n        ],\n        [\n            {filledWith: Marker.unmarked, row: 2, column: 0},\n            {filledWith: Marker.unmarked, row: 2, column: 1},\n            {filledWith: Marker.unmarked, row: 2, column: 2},\n        ],\n    ],\n};\n\nexport interface GameState {\n    currentPlayer: Player;\n    boardData: Board;\n    gameFinished: boolean;\n}\n\nexport interface GameAction extends Action {\n    row?: number;\n    cell?: number;\n}\n\nconst updateGame = (currentState: GameState, clickedCell: GameAction): GameState => {\n    if (currentState.gameFinished) {\n        return currentState;\n    }\n    const cell = currentState.boardData[clickedCell.row][clickedCell.cell];\n    if (isUnmarked(cell)) {\n        currentState.boardData[clickedCell.row][clickedCell.cell].filledWith = getMarkerFor(currentState.currentPlayer);\n    }\n    currentState.gameFinished = isGameFinished(currentState.boardData, currentState.currentPlayer);\n    currentState.currentPlayer = getNextPlayer(currentState.currentPlayer);\n    return currentState;\n};\n\nconst gameReducer = (state = INITIAL_STATE, action: GameAction) => {\n    const currentState = clone(state);\n    switch (action.type) {\n        case SET_MARKER:\n            return {\n                ...updateGame(currentState, action),\n            };\n        case RESET_GAME:\n            return {\n                ...INITIAL_STATE,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default gameReducer;","import {combineReducers} from 'redux';\nimport user from './userRedcuer';\nimport game from './gameReducer';\n\nexport const appReducer = combineReducers({\n    user,\n    game,\n});\n","import {ForkEffect, PutEffect, CallEffect, takeEvery, put, call} from 'redux-saga/effects';\nimport {User} from '../types/types';\nimport {INCREASE_SCORE, LOAD_USER} from '../actions/userActions';\nimport {Action} from 'redux';\nimport {saveUser, setCurrentUsername} from '../actions/actionCreators';\n\nfunction* loadUser(): Iterator<PutEffect> {\n    const userData: User[] = [\n        {id: '12345', username: 'jegom', score: 1},\n        {id: '54321', username: 'maluc', score: 5},\n    ];\n    yield put(saveUser(userData));\n}\n\ninterface UserAction extends Action {\n    username: string;\n}\n\nfunction* increaseScore(action: UserAction): Iterator<PutEffect | CallEffect> {\n    const username = action.username;\n    // increase score for user\n    // const response = yield call(() => {});\n    // set current user in userState\n\n    yield put(setCurrentUsername(username));\n\n    // reload user data\n    // const userData = yield call(() => {});\n    yield call(loadUser);\n}\n\nfunction* userSaga(): Iterator<ForkEffect> {\n    yield takeEvery(LOAD_USER, loadUser);\n    yield takeEvery(INCREASE_SCORE, increaseScore);\n}\n\nexport {userSaga};\n","import GameView from './components/Game/GameView';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport logger from 'redux-logger';\nimport {appReducer} from './reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport * as sagas from './sagas';\n\nconst App = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(appReducer, applyMiddleware(sagaMiddleware, logger));\n    Object.keys(sagas).forEach((saga) => {\n        sagaMiddleware.run(sagas[saga]);\n    });\n    return (\n        <Provider store={store}>\n            <GameView />\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}